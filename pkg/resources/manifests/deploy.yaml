---
# This file is generated by 'make generate-manifests'; DO NOT EDIT.
apiVersion: v1
kind: Namespace
metadata:
  name: gadget
---
# Source: gadget/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gadget
  namespace: gadget
---
# Source: gadget/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gadget-cluster-role
rules:
  - apiGroups: [""]
    resources: ["namespaces", "nodes", "pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["services"]
    # list services is needed by network-policy gadget.
    verbs: ["list"]
  - apiGroups: ["gadget.kinvolk.io"]
    resources: ["traces", "traces/status"]
    # For traces, we need all rights on them as we define this resource.
    verbs: ["delete", "deletecollection", "get", "list", "patch", "create", "update", "watch"]
  - apiGroups: ["*"]
    resources: ["deployments", "replicasets", "statefulsets", "daemonsets", "jobs", "cronjobs", "replicationcontrollers"]
    # Required to retrieve the owner references used by the seccomp gadget.
    verbs: ["get"]
  - apiGroups: ["security-profiles-operator.x-k8s.io"]
    resources: ["seccompprofiles"]
    # Required for integration with the Kubernetes Security Profiles Operator
    verbs: ["list", "watch", "create"]
  - apiGroups: ["security.openshift.io"]
    # It is necessary to use the 'privileged' security context constraints to be
    # able mount host directories as volumes, use the host networking, among others.
    # This will be used only when running on OpenShift:
    # https://docs.openshift.com/container-platform/4.9/authentication/managing-security-context-constraints.html#default-sccs_configuring-internal-oauth
    resources: ["securitycontextconstraints"]
    resourceNames: ["privileged"]
    verbs: ["use"]
---
# Source: gadget/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gadget-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gadget-cluster-role
subjects:
  - kind: ServiceAccount
    name: gadget
    namespace: gadget
---
# Source: gadget/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gadget-role
  namespace: gadget
rules:
  - apiGroups: [""]
    resources: ["pods"]
    # update is needed by traceloop gadget.
    verbs: ["update"]
---
# Source: gadget/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gadget-role-binding
  namespace: gadget
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gadget-role
subjects:
  - kind: ServiceAccount
    name: gadget
---
# Source: gadget/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: gadget
  name: gadget
  namespace: gadget
spec:
  selector:
    matchLabels:
      k8s-app: gadget
  template:
    metadata:
      labels:
        k8s-app: gadget
      annotations:
        # We need to set gadget container as unconfined so it is able to write
        # /sys/fs/bpf as well as /sys/kernel/debug/tracing.
        # Otherwise, we can have error like:
        # "failed to create server failed to create folder for pinning bpf maps: mkdir /sys/fs/bpf/gadget: permission denied"
        # (For reference, see: https://github.com/inspektor-gadget/inspektor-gadget/runs/3966318270?check_suite_focus=true#step:20:221)
        container.apparmor.security.beta.kubernetes.io/gadget: "unconfined"
        inspektor-gadget.kinvolk.io/option-hook-mode: "auto"
        # keep aligned with values in pkg/operators/prometheus/prometheus.go
        prometheus.io/scrape: "true"
        prometheus.io/port: "2223"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccount: gadget
      hostPID: false
      hostNetwork: false
      containers:
        - name: gadget
          terminationMessagePolicy: FallbackToLogsOnError
          image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
          imagePullPolicy: Always
          command: [ "/entrypoint.sh" ]
          lifecycle:
            preStop:
              exec:
                command:
                  - "/cleanup.sh"
          livenessProbe:
            exec:
              command:
                - /bin/gadgettracermanager
                - -liveness
            periodSeconds: 5
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
                - /bin/gadgettracermanager
                - -liveness
            periodSeconds: 5
            timeoutSeconds: 2
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: GADGET_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: TRACELOOP_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TRACELOOP_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: TRACELOOP_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GADGET_IMAGE
              value: "ghcr.io/inspektor-gadget/inspektor-gadget"
            - name: INSPEKTOR_GADGET_VERSION
              value: "latest"
            - name: INSPEKTOR_GADGET_OPTION_HOOK_MODE
              value: "auto"
            - name: INSPEKTOR_GADGET_OPTION_FALLBACK_POD_INFORMER
              value: "true"
            # Make sure to keep these settings in sync with pkg/container-utils/runtime-client/interface.go
            - name: INSPEKTOR_GADGET_CONTAINERD_SOCKETPATH
              value: "/run/containerd/containerd.sock"
            - name: INSPEKTOR_GADGET_CRIO_SOCKETPATH
              value: "/run/crio/crio.sock"
            - name: INSPEKTOR_GADGET_DOCKER_SOCKETPATH
              value: "/run/docker.sock"
            - name: HOST_ROOT
              value: "/host"
            - name: IG_EXPERIMENTAL
              value: "false"
          securityContext:
            # With hostPID/hostNetwork/privileged [1] set to false, we need to set appropriate
            # SELinux context [2] to be able to mount host directories with correct permissions.
            # This option is ignored if hostPID/hostNetwork/privileged is set to true or SELinux isn't enabled.
            # See:
            # 1 - https://github.com/cri-o/cri-o/blob/v1.27.0/server/sandbox_run_linux.go#L537
            # 2 - https://github.com/cri-o/cri-o/blob/v1.27.0/server/container_create_linux.go#L310
            seLinuxOptions:
              type: "spc_t"
            capabilities:
              add:
                # We need CAP_NET_ADMIN to be able to create BPF link.
                # Indeed, link_create is called with prog->type which equals
                # BPF_PROG_TYPE_CGROUP_SKB.
                # This value is then checked in
                # bpf_prog_attach_check_attach_type() which also checks if we have
                # CAP_NET_ADMIN:
                # https://elixir.bootlin.com/linux/v5.14.14/source/kernel/bpf/syscall.c#L4099
                # https://elixir.bootlin.com/linux/v5.14.14/source/kernel/bpf/syscall.c#L2967
                - NET_ADMIN

                # We need CAP_SYS_ADMIN to use Python-BCC gadgets because bcc
                # internally calls bpf_get_map_fd_by_id() which contains the
                # following snippet:
                # if (!capable(CAP_SYS_ADMIN))
                # 	return -EPERM;
                # (https://elixir.bootlin.com/linux/v5.10.73/source/kernel/bpf/syscall.c#L3254)
                #
                # Details about this are given in:
                # > The important design decision is to allow ID->FD transition for
                # CAP_SYS_ADMIN only. What it means that user processes can run
                # with CAP_BPF and CAP_NET_ADMIN and they will not be able to affect each
                # other unless they pass FDs via scm_rights or via pinning in bpffs.
                # ID->FD is a mechanism for human override and introspection.
                # An admin can do 'sudo bpftool prog ...'. It's possible to enforce via LSM that
                # only bpftool binary does bpf syscall with CAP_SYS_ADMIN and the rest of user
                # space processes do bpf syscall with CAP_BPF isolating bpf objects (progs, maps,
                # links) that are owned by such processes from each other.
                # (https://lwn.net/Articles/820560/)
                #
                # Note that even with a kernel providing CAP_BPF, the above
                # statement is still true.
                - SYS_ADMIN

                # We need this capability to get addresses from /proc/kallsyms.
                # Without it, addresses displayed when reading this file will be
                # 0.
                # Thus, bcc_procutils_each_ksym will never call callback, so KSyms
                # syms_ vector will be empty and it will return false.
                # As a consequence, no prefix will be found in
                # get_syscall_prefix(), so a default prefix (_sys) will be
                # returned.
                # Sadly, this default prefix is not used by the running kernel,
                # which instead uses: __x64_sys_
                - SYSLOG

                # traceloop gadget uses strace which in turns use ptrace()
                # syscall.
                # Within kernel code, ptrace() calls ptrace_attach() which in
                # turns calls __ptrace_may_access() which calls ptrace_has_cap()
                # where CAP_SYS_PTRACE is finally checked:
                # https://elixir.bootlin.com/linux/v5.14.14/source/kernel/ptrace.c#L284
                - SYS_PTRACE

                # Needed by setrlimit in gadgettracermanager and by the traceloop
                # gadget.
                - SYS_RESOURCE

                # Needed for gadgets that don't dumb the memory rlimit.
                # (Currently only applies to BCC python-based gadgets)
                - IPC_LOCK

                # Needed by BCC python-based gadgets to load the kheaders module:
                # https://github.com/iovisor/bcc/blob/v0.24.0/src/cc/frontends/clang/kbuild_helper.cc#L158
                - SYS_MODULE

                # Needed by gadgets that open a raw sock like dns and snisnoop
                - NET_RAW
          volumeMounts:
            - mountPath: /host
              name: host
            - mountPath: /run
              name: run
            - mountPath: /lib/modules
              name: modules
            - mountPath: /sys/kernel/debug
              name: debugfs
            - mountPath: /sys/fs/cgroup
              name: cgroup
            - mountPath: /sys/fs/bpf
              name: bpffs
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        {}
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      volumes:
        - name: host
          hostPath:
            path: /
        - name: run
          hostPath:
            path: /run
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
        - name: modules
          hostPath:
            path: /lib/modules
        - name: bpffs
          hostPath:
            path: /sys/fs/bpf
        - name: debugfs
          hostPath:
            path: /sys/kernel/debug
